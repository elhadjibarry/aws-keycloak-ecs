Description:  This template deploys a VPC with public and private subnets, Internet Gateway, NAT Gateways, and an RDS instance for Keycloak. 
  It also creates security groups and Secrets Manager secrets for the RDS and Keycloak. 
  It is used as a foundation for deploying the Keycloak application on ECS.

#Parameters to be passed to the template at the time of deployment.
#You can customize these parameters or use the default values at the time of deployment.
Parameters:

  ProjectName:
    Description: The project name that is prefixed to resource names
    Type: String
    Default: keycloak

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.1.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.0.2.0/24

  ECSPrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the ECS private subnet in the first Availability Zone
    Type: String
    Default: 10.0.3.0/24

  ECSPrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the ECS private subnet in the second Availability Zone
    Type: String
    Default: 10.0.4.0/24

  RDSPrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the RDS private subnet in the first Availability Zone
    Type: String
    Default: 10.0.5.0/24

  RDSPrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the RDS private subnet in the second Availability Zone
    Type: String
    Default: 10.0.6.0/24

  DBInstanceIdentifier:
    Description: The database instance identifier
    Type: String
    Default: keycloakdb-instance

  DBName:
    Description: The name of the database to create
    Type: String
    Default: keycloakdb

  DBUser:
    Description: The database admin account username (Password will be generated by Secrets Manager)
    Type: String
    Default: dbadmin

  DBAllocatedStorage:
    Description: The size of the database (GB)
    Type: Number
    Default: 20

  DBInstanceClass:
    Description: The database instance type
    Type: String
    Default: db.t3.micro
    AllowedValues: 
      - db.t3.micro
      - db.t3.small
      - db.t3.medium
      - db.t3.large

  KeycloakAdminUsername:
    Description: The Keycloak admin username (Password will be generated by Secrets Manager)
    Type: String
    Default: keycloakadmin

  DomainName:
    Type: String
    Description: The domain name that will be used to create a certificate in ACM for the ALB

  HostedZoneId:
    Type: String
    Description: The ID of the Route 53 Hosted Zone of the domain to create a certificate in ACM

#Condition to check if the HostedZoneId and DomainName parameters are provided to create a certificate in ACM.
Conditions:
  CreateCertificate: !And
    - !Not [!Equals [!Ref DomainName, ""]]
    - !Not [!Equals [!Ref HostedZoneId, ""]]

Resources:

  # KeycloakECSTaskExecutionRole resource creates an IAM role that allows ECS tasks to make API requests to AWS services on your behalf.
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: KeycloakECSTaskExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # VPC resource creates a virtual network with the specified CIDR block. DNS hostnames and DNS support is enabled
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Sub ${ProjectName}-VPC

  # InternetGateway resource creates an internet gateway for internet access to the VPC.
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub ${ProjectName}-InternetGateway

  # VPCGatewayAttachment resource attaches the internet gateway to the VPC.
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # PublicSubnet1 resource creates a public subnet in the first Availability Zone.
  # This will be used for the the Application Load Balancer (ALB).
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CIDR
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-Public-Subnet-AZ1

  #We need to create a public subnet in the second Availability Zone for high availability and fault tolerance.
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2CIDR
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-Public-Subnet-AZ2

  # ECSPrivateSubnet1 resource creates a private subnet in the first Availability Zone.
  # This will be used for the ECS tasks.
  ECSPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref ECSPrivateSubnet1CIDR
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-ECS-Private-Subnet-AZ1

  #We need to create a private subnet in the second Availability Zone for high availability and fault tolerance.
  ECSPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref ECSPrivateSubnet2CIDR
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-ECS-Private-Subnet-AZ2

  # RDSPrivateSubnet1 resource creates a private subnet in the first Availability Zone.
  # This will be used for the RDS instance.
  RDSPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref RDSPrivateSubnet1CIDR
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-RDS-Private-Subnet-AZ1  

  #We need to create a private subnet in the second Availability Zone for high availability and fault tolerance.
  RDSPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref RDSPrivateSubnet2CIDR
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-RDS-Private-Subnet-AZ2
  
  # Elastic IP for the Nat Gateway in AZ1
  # This is used to assign a static IP address to the NAT Gateway in the first Availability Zone.
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-ElasticIP-AZ1

  # Elastic IP for the Nat Gateway in AZ2
  # This is used to assign a static IP address to the NAT Gateway in the second Availability Zone.
  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-ElasticIP-AZ2

  # Nat Gateway in the first Availability Zone.
  # The NAT Gateway 1 needs to be created in the public subnet 1.
  # This is used to provide outgoing internet access to the ECS task in the private subnet in the first Availability Zone.
  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-Nat-Gateway-AZ1

  # Nat Gateway in the second Availability Zone
  # The NAT Gateway 2 needs to be created in the public subnet 2.
  # This is used to provide outgoing internet access to the ECS task in the private subnet in the second Availability Zone.
  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-Nat-Gateway-AZ2

  # RouteTable resource creates a route table for the VPC
  # This route table will be associated with the public subnets to define the routing rules for the traffic.
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-Public-Route-Table

  # PublicRoute resource creates a route in the route table to the internet gateway, allowing traffic to flow to the Internet.
  #The DestinationCidrBlock is set to 0.0.0.0/0, which is the CIDR block that matches all IP addresses. 
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # PublicSubnetRouteTableAssociation resource associates the public route table with the public subnets
  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # PrivateRouteTable resource creates a route table for the VPC
  # This route table will be associated with the ECS private subnets to define the routing rules for the traffic.
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-Private-Route-Table-AZ1

  # PrivateRoute resource creates a route in the route table to the NAT Gateway, allowing traffic to flow from the private subnet to the Internet.
  # This means that the tasks in the private subnet can access the Internet through the NAT Gateway.
  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  # PrivateSubnetRouteTableAssociation resource associates the private route table with the private subnets
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref ECSPrivateSubnet1

  # We need to create a route table for the private subnet in the second Availability Zone.
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-Private-Route-Table-AZ2

  # We need to create a route in the route table to the NAT Gateway in the second Availability Zone.
  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  # PrivateSubnetRouteTableAssociation resource associates the private route table with the private subnets in the second Availability Zone.
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref ECSPrivateSubnet2

  # ALB Security Groups creates a security group that allows all traffic from the internet
  # This security group will be used by the Application Load Balancer to allow traffic on port 443 (HTTPS) from anywhere in the internet.
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-ALB-Security-Group

  # ECSSecurityGroup allows you to specify which traffic is allowed to reach the ECS tasks in the private subnets.
  # This allows only the ALB to communicate with the ECS tasks on port 8080.
  # This also allows the ALB to communicate with the ECS tasks on port 9000 for the Keycloak health check.
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'ECS Security Group'
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        SourceSecurityGroupId: !Ref ALBSecurityGroup
      - IpProtocol: tcp
        FromPort: 9000
        ToPort: 9000
        SourceSecurityGroupId: !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-ECS-Security-Group

  # RDSSecurityGroup allows you to specify which traffic is allowed to reach the RDS instance.
  # This allows the ECS tasks to communicate with the RDS instance on port 5432.
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to RDS instance
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ECSSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-RDS-Security-Group

  # DBSubnetGroup resource creates a DB subnet group for the RDS instance.
  # This subnet group defines the subnets in which the RDS instance will be created.
  # The RDS instance will be created in the private subnets in the two Availability Zones.
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS instance
      SubnetIds:
        - !Ref RDSPrivateSubnet1
        - !Ref RDSPrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-DB-Subnet-Group

  # DBSecret resource creates a secret in AWS Secrets Manager that contains the database credentials.
  # The database admin account username is passed as a parameter, and the password is generated by Secrets Manager.
  DBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${ProjectName}-DBSecret"
      Description: "RDS instance credentials"
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"dbusername": "${DBUser}"}'
        GenerateStringKey: "dbpassword"
        PasswordLength: 16
        ExcludeCharacters: '"@/\\'
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-DBSecret"

  # RDSInstance resource creates an RDS instance in the private subnets in the two Availability Zones.
  # The RDS instance is a PostgreSQL database with Multi-AZ enabled for high availability and fault tolerance.
  # The database admin account username and password are retrieved from the Secrets Manager secret.
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Ref DBInstanceIdentifier
      DBName: !Ref DBName
      MasterUsername: !Join [ "", [ "{{resolve:secretsmanager:", !Ref DBSecret, ":SecretString:dbusername}}" ] ]
      MasterUserPassword: !Join [ "", [ "{{resolve:secretsmanager:", !Ref DBSecret, ":SecretString:dbpassword}}" ] ]
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: !Ref DBAllocatedStorage
      Engine: postgres
      VPCSecurityGroups:
        - !GetAtt RDSSecurityGroup.GroupId
      DBSubnetGroupName: !Ref DBSubnetGroup
      MultiAZ: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-RDS-Instance

  # KeycloakSecret resource creates a secret in AWS Secrets Manager that contains the Keycloak credentials.
  # The Keycloak admin username is passed as a parameter, and the password is generated by Secrets Manager.
  # This secret will be used by the Keycloak ECS task to retrieve the admin credentials.
  KeycloakSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: KeycloakSecret
      Description: "Keycloak credentials"
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"keycloakadminusername": "${KeycloakAdminUsername}"}'
        GenerateStringKey: "keycloakadminpassword"
        PasswordLength: 16
        ExcludeCharacters: '"@/\\'
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-Keycloak-Secret"

  # ACM Certificate resource requests a public certificate for the specified domain name.
  # This certificate will be used by the Application Load Balancer to enable HTTPS traffic.
  Certificate:
    Type: AWS::CertificateManager::Certificate
    Condition: CreateCertificate
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedZoneId
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-Certificate
  
# Outputs section of the template allows you to define the outputs of the template that you want to be displayed after the stack is created.
# In this template, we are outputting the endpoint of the RDS instance, the ARN of the database secret, and the ARN of the Keycloak secret.
Outputs:
  RDSInstanceEndpoint:
    Description: The endpoint of the RDS instance
    Value: !GetAtt RDSInstance.Endpoint.Address
  DBSecretArn:
    Description: The ARN of the database secret
    Value: !Ref DBSecret
  KeycloakSecretArn:
    Description: The ARN of the Keycloak secret
    Value: !Ref KeycloakSecret
  CertificateArn:
    Description: The ARN of the ACM certificate
    Value: !Ref Certificate