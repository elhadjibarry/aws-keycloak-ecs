AWSTemplateFormatVersion: '2010-09-09'
Description: Keycloak ECS Setup with Load Balancer and Auto Scaling

Parameters:
  VPCId:
    Type: AWS::EC2::VPC::Id
    Description: The ID of the VPC
  PublicSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The list of Public Subnet IDs for the Load Balancer
  ECSPrivateSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The list of Private Subnet IDs for the ECS tasks
  ALBSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: The ID of the Load Balancer Security Group
  ECSSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: The ID of the ECS task Security Group
  HostedZoneId:
    Type: String
    Description: The ID of the Route 53 Hosted Zone
  DomainName:
    Type: String
    Description: The domain name for the alias record
  RDSInstanceEndpoint:
    Type: String
    Description: The RDS instance endpoint for Keycloak database
  DBSecretArn:
    Type: String
    Description: The ARN of the secret in AWS Secrets Manager that contains the database credentials
  KeycloakSecretArn:
    Type: String
    Description: The ARN of the secret in AWS Secrets Manager that contains the Keycloak credentials
  CertificateArn:
    Type: String
    Description: The ARN of the SSL/TLS certificate in AWS Certificate Manager (ACM)

Resources:

  KeycloakLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/ecs/dev-keycloak"
      RetentionInDays: 14

  KeycloakCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: dev-keycloak-cluster
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
          base: 1

  KeycloakTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: dev-keycloak-task
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 1024
      Memory: 2048
      ExecutionRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/KeycloakECSTaskExecutionRole"
      ContainerDefinitions:
        - Name: dev-keycloak
          Image: !Sub ${AWS::AccountId}.dkr.ecr.us-east-1.amazonaws.com/dev-keycloak
          Command: ["start"]
          Essential: true
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
              Protocol: tcp
          Environment:
            - Name: KC_BOOTSTRAP_ADMIN_USERNAME
              Value: !Join [ "", [ "{{resolve:secretsmanager:", !Ref KeycloakSecretArn, ":SecretString:keycloakadminusername}}" ] ]
            - Name: KC_BOOTSTRAP_ADMIN_PASSWORD
              Value: !Join [ "", [ "{{resolve:secretsmanager:", !Ref KeycloakSecretArn, ":SecretString:keycloakadminpassword}}" ] ]
            - Name: KC_DB
              Value: postgres
            - Name: KC_DB_URL
              Value: !Sub jdbc:postgresql://${RDSInstanceEndpoint}:5432/keycloakdb
            - Name: KC_DB_USERNAME
              Value: !Join [ "", [ "{{resolve:secretsmanager:", !Ref DBSecretArn, ":SecretString:dbusername}}" ] ]
            - Name: KC_DB_PASSWORD
              Value: !Join [ "", [ "{{resolve:secretsmanager:", !Ref DBSecretArn, ":SecretString:dbpassword}}" ] ]
            - Name: KC_HOSTNAME
              Value: !Ref DomainName
            - Name: KC_HOSTNAME_STRICT
              Value: false
            - Name: KC_HTTP_ENABLED
              Value: true
            - Name: KC_PROXY_HEADERS
              Value: xforwarded
            - Name: KC_LOG_LEVEL
              Value: INFO
            - Name: KC_HEALTH_ENABLED
              Value: true
            - Name: KC_METRICS_ENABLED
              Value: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref KeycloakLogGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: keycloak

  KeycloakTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: dev-keycloak-target-group
      Protocol: HTTP
      Port: 8080
      VpcId: !Ref VPCId
      TargetType: ip
      HealthCheckProtocol: HTTPS
      HealthCheckPort: 9000
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3

  KeycloakLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: dev-keycloak-load-balancer
      Subnets: !Ref PublicSubnetIds
      SecurityGroups:
        - !Ref ALBSecurityGroupId

  KeycloakListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref KeycloakLoadBalancer
      Protocol: HTTPS
      Port: 443
      Certificates:
        - CertificateArn: !Ref CertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref KeycloakTargetGroup

  KeycloakService:
    Type: AWS::ECS::Service
    DependsOn: KeycloakListener
    Properties:
      Cluster: !Ref KeycloakCluster
      ServiceName: dev-keycloak-service
      TaskDefinition: !Ref KeycloakTaskDefinition
      DesiredCount: 2
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Ref ECSPrivateSubnetIds
          SecurityGroups:
            - !Ref ECSSecurityGroupId
          AssignPublicIp: DISABLED
      LoadBalancers:
        - TargetGroupArn: !Ref KeycloakTargetGroup
          ContainerName: dev-keycloak
          ContainerPort: 8080

  KeycloakScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: KeycloakService
    Properties:
      ServiceNamespace: ecs
      ResourceId: service/dev-keycloak-cluster/dev-keycloak-service
      ScalableDimension: ecs:service:DesiredCount
      MinCapacity: 1
      MaxCapacity: 5
      RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"

  KeycloakScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: dev-keycloak-cpu-scaling-policy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref KeycloakScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 50.0
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleOutCooldown: 300
        ScaleInCooldown: 300

  Route53AliasRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt KeycloakLoadBalancer.DNSName
        HostedZoneId: !GetAtt KeycloakLoadBalancer.CanonicalHostedZoneID

Outputs:
  LoadBalancerDNSName:
    Description: The DNS name of the load balancer
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt KeycloakLoadBalancer.DNSName

  DomainName:
    Description: The domain name for the alias record
    Value: !Sub "https://${DomainName}"